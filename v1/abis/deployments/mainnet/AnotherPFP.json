{
  "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_baseTokenUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_treasureQuantity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Locked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressMintedPerSeason",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRootPerSeason",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseTokenUri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "setSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
  "receipt": {
    "to": null,
    "from": "0x2BBC44D4449e947d3612C2b16147d9206eaeD990",
    "contractAddress": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
    "transactionIndex": 117,
    "gasUsed": "3094053",
    "logsBloom": "0x24000080100000000040004400800000000002000010000000800000000000000000000040000200000000000400000000003000060480a00020001200240000001030000000008800000008000000001043000000040010000000001002000028000000020000000000000000000800200000004000020000000810040000400080000400000800010000000008041208001900000400000000000000000000000400000100000020000102010000000000000000808060002000080401400040101102000000000400000000000000082000008000000020000100000060222000400200000000080000000000000000000000008004040108008000884000",
    "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26",
    "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
    "logs": [
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990"
        ],
        "data": "0x",
        "logIndex": 176,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 177,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 178,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 179,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 180,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 181,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 182,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 184,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 185,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 186,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 187,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 188,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 189,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 190,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 191,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 192,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 193,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 194,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 195,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 196,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 197,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 198,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 199,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 200,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 201,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 202,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 203,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 205,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 206,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 207,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 208,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 15983570,
        "transactionHash": "0xb17c47960a87a3bd3f8c403458d87c8036427af10d2e24d9634550f52ef9a090",
        "address": "0x9ffb419404a5b1b8551d0127Ed3562D9E622292E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bbc44d4449e947d3612c2b16147d9206eaed990",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 209,
        "blockHash": "0xc7911977bf66224c4fce93e93c48841c64a521d2a0f3735e26ef9297c069fc26"
      }
    ],
    "blockNumber": 15983570,
    "cumulativeGasUsed": "12279912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "0": 15,
      "1": 54,
      "2": 143,
      "3": 19,
      "4": 134,
      "5": 113,
      "6": 18,
      "7": 191,
      "8": 139,
      "9": 81,
      "10": 33,
      "11": 2,
      "12": 159,
      "13": 66,
      "14": 245,
      "15": 67,
      "16": 73,
      "17": 181,
      "18": 179,
      "19": 14,
      "20": 252,
      "21": 13,
      "22": 230,
      "23": 232,
      "24": 111,
      "25": 94,
      "26": 197,
      "27": 73,
      "28": 36,
      "29": 90,
      "30": 8,
      "31": 15
    },
    "https://anotherblock.mypinata.cloud/ipfs/QmUvDHmmSZuZgV5S9F7baSryvYAgMY5NF6kJcB45U3Uqyh/",
    33,
    "AnotherPFP",
    "ABPFP"
  ],
  "numDeployments": 1,
  "solcInputHash": "d4313f750f47df1cb5225fed11aae9e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_treasureQuantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedPerSeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRootPerSeason\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"setSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_baseTokenUri\":\": base token URI\",\"_merkleRoot\":\": Merkle root for verifying allowlist\",\"_name\":\": name of the NFT contract\",\"_symbol\":\": symbol / ticker of the NFT contract*\",\"_treasureQuantity\":\": Amount of initial nfts minted to treasury\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,uint256,bytes32[])\":{\"params\":{\"_proof\":\": merkle tree proof used to verify allowlisted user\",\"_quantity\":\": quantity of nfts to mint\",\"_to\":\": address to mint to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setMerkleRoot(bytes32,uint256)\":{\"params\":{\"_merkleRoot\":\": the new merkle root to be set\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"AnotherPFP contract constructor\"},\"mint(address,uint256,bytes32[])\":{\"notice\":\"Lets an allowlisted user mint another pfp\"},\"setMerkleRoot(bytes32,uint256)\":{\"notice\":\"Update the merkle root (for allowlist)  Only the contract owner can perform this operation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnotherPFP.sol\":\"AnotherPFP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AnotherPFP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport 'erc721a/contracts/ERC721A.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\nerror Locked();\\n\\nerror NotAllowed();\\n\\nerror AlreadyMinted();\\n\\ncontract AnotherPFP is ERC721A, Ownable {\\n    // base Token URI\\n    string public baseTokenUri;\\n\\n    // merkle root per season\\n    mapping(uint256 => bytes32) public merkleRootPerSeason;\\n\\n    // address minted per season\\n    mapping(uint256 => mapping(address => bool)) public addressMintedPerSeason;\\n\\n    // current drop season\\n    uint256 public currentSeason = 0;\\n\\n    bool public locked = false;\\n\\n    /**\\n     * @notice\\n     *  AnotherPFP contract constructor\\n     *\\n     * @param _merkleRoot : Merkle root for verifying allowlist\\n     * @param _baseTokenUri : base token URI\\n     * @param _treasureQuantity : Amount of initial nfts minted to treasury\\n     * @param _name : name of the NFT contract\\n     * @param _symbol : symbol / ticker of the NFT contract\\n     **/\\n    constructor(\\n        bytes32 _merkleRoot,\\n        string memory _baseTokenUri,\\n        uint256 _treasureQuantity,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721A(_name, _symbol) {\\n        baseTokenUri = _baseTokenUri;\\n        merkleRootPerSeason[0] = _merkleRoot;\\n\\n        _mint(msg.sender, _treasureQuantity);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Update the merkle root (for allowlist)\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _merkleRoot : the new merkle root to be set\\n     */\\n    function setMerkleRoot(bytes32 _merkleRoot, uint256 season)\\n        external\\n        onlyOwner\\n    {\\n        merkleRootPerSeason[season] = _merkleRoot;\\n    }\\n\\n    function lock() external onlyOwner {\\n        locked = true;\\n    }\\n\\n    function setSeason(uint256 season) external onlyOwner {\\n        currentSeason = season;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseTokenUri;\\n    }\\n\\n    function setBaseURI(string memory _baseTokenUri) external onlyOwner {\\n        baseTokenUri = _baseTokenUri;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Lets an allowlisted user mint another pfp\\n     *\\n     * @param _to : address to mint to\\n     * @param _quantity : quantity of nfts to mint\\n     * @param _proof : merkle tree proof used to verify allowlisted user\\n     */\\n\\n    function mint(\\n        address _to,\\n        uint256 _quantity,\\n        bytes32[] memory _proof\\n    ) public {\\n        if (locked) {\\n            revert Locked();\\n        }\\n\\n        if (addressMintedPerSeason[currentSeason][_to]) {\\n            revert AlreadyMinted();\\n        }\\n\\n        bool isAllowlisted = MerkleProof.verify(\\n            _proof,\\n            merkleRootPerSeason[currentSeason],\\n            keccak256(abi.encodePacked(_to, _quantity))\\n        );\\n\\n        if (!isAllowlisted) {\\n            revert NotAllowed();\\n        }\\n\\n        addressMintedPerSeason[currentSeason][_to] = true;\\n        _mint(_to, _quantity);\\n    }\\n}\\n\",\"keccak256\":\"0xb5f5490410b0805ae2fe067346c610353a4816462902486809b67b8c961358b6\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721A {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr) if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex < end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex < end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex < end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1010eb461bb66818d1a96c14e99c751f27565b8815710f0bf9bc10e1ce87b9f2\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A is IERC721, IERC721Metadata {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     * \\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4a7c80c6e0ca1d7914c96374183df0199d9f0a85c8b6732dff93f83f65f45f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600c556000600d60006101000a81548160ff0219169083151502179055503480156200003157600080fd5b506040516200398b3803806200398b83398181016040528101906200005791906200062f565b8181816002908051906020019062000071929190620004df565b5080600390805190602001906200008a929190620004df565b506200009b6200011160201b60201c565b6000819055505050620000c3620000b76200011660201b60201c565b6200011e60201b60201c565b8360099080519060200190620000db929190620004df565b5084600a600080815260200190815260200160002081905550620001063384620001e460201b60201c565b5050505050620008b4565b600090565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000252576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008214156200028e576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620002a36000848385620004d360201b60201c565b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160088282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826004600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426004600083815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000819050600083820190505b818060010192508573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a48082106200044657816000819055505050620004ce6000848385620004d960201b60201c565b505050565b50505050565b50505050565b828054620004ed90620007a5565b90600052602060002090601f0160209004810192826200051157600085556200055d565b82601f106200052c57805160ff19168380011785556200055d565b828001600101855582156200055d579182015b828111156200055c5782518255916020019190600101906200053f565b5b5090506200056c919062000570565b5090565b5b808211156200058b57600081600090555060010162000571565b5090565b6000620005a6620005a08462000725565b620006fc565b905082815260208101848484011115620005bf57600080fd5b620005cc8482856200076f565b509392505050565b600081519050620005e58162000880565b92915050565b600082601f830112620005fd57600080fd5b81516200060f8482602086016200058f565b91505092915050565b60008151905062000629816200089a565b92915050565b600080600080600060a086880312156200064857600080fd5b60006200065888828901620005d4565b955050602086015167ffffffffffffffff8111156200067657600080fd5b6200068488828901620005eb565b9450506040620006978882890162000618565b935050606086015167ffffffffffffffff811115620006b557600080fd5b620006c388828901620005eb565b925050608086015167ffffffffffffffff811115620006e157600080fd5b620006ef88828901620005eb565b9150509295509295909350565b6000620007086200071b565b9050620007168282620007db565b919050565b6000604051905090565b600067ffffffffffffffff82111562000743576200074262000840565b5b6200074e826200086f565b9050602081019050919050565b6000819050919050565b6000819050919050565b60005b838110156200078f57808201518184015260208101905062000772565b838111156200079f576000848401525b50505050565b60006002820490506001821680620007be57607f821691505b60208210811415620007d557620007d462000811565b5b50919050565b620007e6826200086f565b810181811067ffffffffffffffff8211171562000808576200080762000840565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200088b816200075b565b81146200089757600080fd5b50565b620008a58162000765565b8114620008b157600080fd5b50565b6130c780620008c46000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80637a0101a2116100f9578063b88d4fde11610097578063cf30901211610071578063cf309012146104b8578063e985e9c5146104d6578063f2fde38b14610506578063f83d08ba14610522576101a9565b8063b88d4fde1461044e578063bcb396211461046a578063c87b56dd14610488576101a9565b806395d89b41116100d357806395d89b41146103c8578063a22cb465146103e6578063a9147d4a14610402578063af88fac914610432576101a9565b80637a0101a2146103705780637c382d0b1461038e5780638da5cb5b146103aa576101a9565b806323b872dd116101665780636352211e116101405780636352211e146102ea578063641ce1401461031a57806370a0823114610336578063715018a614610366576101a9565b806323b872dd1461029657806342842e0e146102b257806355f804b3146102ce576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc57806308d084621461022c578063095ea7b31461025c57806318160ddd14610278575b600080fd5b6101c860048036038101906101c3919061279b565b61052c565b6040516101d59190612a9d565b60405180910390f35b6101e661060e565b6040516101f39190612ad3565b60405180910390f35b6102166004803603810190610211919061282e565b6106a0565b6040516102239190612a36565b60405180910390f35b6102466004803603810190610241919061282e565b61071c565b6040516102539190612ab8565b60405180910390f35b610276600480360381019061027191906126bc565b610734565b005b610280610839565b60405161028d9190612b35565b60405180910390f35b6102b060048036038101906102ab91906125b6565b610850565b005b6102cc60048036038101906102c791906125b6565b610860565b005b6102e860048036038101906102e391906127ed565b610880565b005b61030460048036038101906102ff919061282e565b6108a2565b6040516103119190612a36565b60405180910390f35b610334600480360381019061032f91906126f8565b6108b8565b005b610350600480360381019061034b9190612551565b610a94565b60405161035d9190612b35565b60405180910390f35b61036e610b64565b005b610378610b78565b6040516103859190612ad3565b60405180910390f35b6103a860048036038101906103a3919061275f565b610c06565b005b6103b2610c2a565b6040516103bf9190612a36565b60405180910390f35b6103d0610c54565b6040516103dd9190612ad3565b60405180910390f35b61040060048036038101906103fb9190612680565b610ce6565b005b61041c60048036038101906104179190612857565b610e5e565b6040516104299190612a9d565b60405180910390f35b61044c6004803603810190610447919061282e565b610e8d565b005b61046860048036038101906104639190612605565b610e9f565b005b610472610f17565b60405161047f9190612b35565b60405180910390f35b6104a2600480360381019061049d919061282e565b610f1d565b6040516104af9190612ad3565b60405180910390f35b6104c0610fbc565b6040516104cd9190612a9d565b60405180910390f35b6104f060048036038101906104eb919061257a565b610fcf565b6040516104fd9190612a9d565b60405180910390f35b610520600480360381019061051b9190612551565b611063565b005b61052a6110e7565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061060757506106068261110c565b5b9050919050565b60606002805461061d90612dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461064990612dc1565b80156106965780601f1061066b57610100808354040283529160200191610696565b820191906000526020600020905b81548152906001019060200180831161067957829003601f168201915b5050505050905090565b60006106ab82611176565b6106e1576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600a6020528060005260406000206000915090505481565b600061073f826108a2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107a7576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107c66111c4565b73ffffffffffffffffffffffffffffffffffffffff1614610829576107f2816107ed6111c4565b610fcf565b610828576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6108348383836111cc565b505050565b600061084361127e565b6001546000540303905090565b61085b838383611283565b505050565b61087b83838360405180602001604052806000815250610e9f565b505050565b610888611739565b806009908051906020019061089e929190612287565b5050565b60006108ad826117b7565b600001519050919050565b600d60009054906101000a900460ff16156108ff576040517f0f2e5b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b6000600c54815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610996576040517fddefae2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109e082600a6000600c5481526020019081526020016000205486866040516020016109c59291906129e6565b60405160208183030381529060405280519060200120611a42565b905080610a19576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b6000600c54815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a8e8484611a59565b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610afc576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b610b6c611739565b610b766000611d35565b565b60098054610b8590612dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb190612dc1565b8015610bfe5780601f10610bd357610100808354040283529160200191610bfe565b820191906000526020600020905b815481529060010190602001808311610be157829003601f168201915b505050505081565b610c0e611739565b81600a6000838152602001908152602001600020819055505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610c6390612dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f90612dc1565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b5050505050905090565b610cee6111c4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d53576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060076000610d606111c4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610e0d6111c4565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610e529190612a9d565b60405180910390a35050565b600b6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610e95611739565b80600c8190555050565b610eaa848484611283565b610ec98373ffffffffffffffffffffffffffffffffffffffff16611dfb565b15610f1157610eda84848484611e1e565b610f10576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b600c5481565b6060610f2882611176565b610f5e576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f68611f7e565b9050600081511415610f895760405180602001604052806000815250610fb4565b80610f9384612010565b604051602001610fa4929190612a12565b6040516020818303038152906040525b915050919050565b600d60009054906101000a900460ff1681565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61106b611739565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d290612af5565b60405180910390fd5b6110e481611d35565b50565b6110ef611739565b6001600d60006101000a81548160ff021916908315150217905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008161118161127e565b11158015611190575060005482105b80156111bd575060046000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600090565b600061128e826117b7565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146112f9576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1661131a6111c4565b73ffffffffffffffffffffffffffffffffffffffff1614806113495750611348856113436111c4565b610fcf565b5b8061138e57506113576111c4565b73ffffffffffffffffffffffffffffffffffffffff16611376846106a0565b73ffffffffffffffffffffffffffffffffffffffff16145b9050806113c7576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561142e576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61143b85858560016121bd565b611447600084876111cc565b6001600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600460008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116c75760005482146116c657878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461173285858560016121c3565b5050505050565b6117416111c4565b73ffffffffffffffffffffffffffffffffffffffff1661175f610c2a565b73ffffffffffffffffffffffffffffffffffffffff16146117b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ac90612b15565b60405180910390fd5b565b6117bf61230d565b6000829050806117cd61127e565b11611a0b57600054811015611a0a576000600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff16151515158152505090508060400151611a0857600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146118ec578092505050611a3d565b5b600115611a0757818060019003925050600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614611a02578092505050611a3d565b6118ed565b5b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600082611a4f85846121c9565b1490509392505050565b600080549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ac6576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821415611b01576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b0e60008483856121bd565b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160088282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826004600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426004600083815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000819050600083820190505b818060010192508573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4808210611cb157816000819055505050611d3060008483856121c3565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e446111c4565b8786866040518563ffffffff1660e01b8152600401611e669493929190612a51565b602060405180830381600087803b158015611e8057600080fd5b505af1925050508015611eb157506040513d601f19601f82011682018060405250810190611eae91906127c4565b60015b611f2b573d8060008114611ee1576040519150601f19603f3d011682016040523d82523d6000602084013e611ee6565b606091505b50600081511415611f23576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060098054611f8d90612dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb990612dc1565b80156120065780601f10611fdb57610100808354040283529160200191612006565b820191906000526020600020905b815481529060010190602001808311611fe957829003601f168201915b5050505050905090565b60606000821415612058576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506121b8565b600082905060005b6000821461208a57808061207390612e24565b915050600a826120839190612c9c565b9150612060565b60008167ffffffffffffffff8111156120cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120fe5781602001600182028036833780820191505090505b5090505b600085146121b1576001826121179190612ccd565b9150600a856121269190612e9b565b60306121329190612c46565b60f81b81838151811061216e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856121aa9190612c9c565b9450612102565b8093505050505b919050565b50505050565b50505050565b60008082905060005b845181101561223a5761222582868381518110612218577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612245565b9150808061223290612e24565b9150506121d2565b508091505092915050565b600081831061225d576122588284612270565b612268565b6122678383612270565b5b905092915050565b600082600052816020526040600020905092915050565b82805461229390612dc1565b90600052602060002090601f0160209004810192826122b557600085556122fc565b82601f106122ce57805160ff19168380011785556122fc565b828001600101855582156122fc579182015b828111156122fb5782518255916020019190600101906122e0565b5b5090506123099190612350565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b5b80821115612369576000816000905550600101612351565b5090565b600061238061237b84612b75565b612b50565b9050808382526020820190508285602086028201111561239f57600080fd5b60005b858110156123cf57816123b588826124a9565b8452602084019350602083019250506001810190506123a2565b5050509392505050565b60006123ec6123e784612ba1565b612b50565b90508281526020810184848401111561240457600080fd5b61240f848285612d7f565b509392505050565b600061242a61242584612bd2565b612b50565b90508281526020810184848401111561244257600080fd5b61244d848285612d7f565b509392505050565b6000813590506124648161301e565b92915050565b600082601f83011261247b57600080fd5b813561248b84826020860161236d565b91505092915050565b6000813590506124a381613035565b92915050565b6000813590506124b88161304c565b92915050565b6000813590506124cd81613063565b92915050565b6000815190506124e281613063565b92915050565b600082601f8301126124f957600080fd5b81356125098482602086016123d9565b91505092915050565b600082601f83011261252357600080fd5b8135612533848260208601612417565b91505092915050565b60008135905061254b8161307a565b92915050565b60006020828403121561256357600080fd5b600061257184828501612455565b91505092915050565b6000806040838503121561258d57600080fd5b600061259b85828601612455565b92505060206125ac85828601612455565b9150509250929050565b6000806000606084860312156125cb57600080fd5b60006125d986828701612455565b93505060206125ea86828701612455565b92505060406125fb8682870161253c565b9150509250925092565b6000806000806080858703121561261b57600080fd5b600061262987828801612455565b945050602061263a87828801612455565b935050604061264b8782880161253c565b925050606085013567ffffffffffffffff81111561266857600080fd5b612674878288016124e8565b91505092959194509250565b6000806040838503121561269357600080fd5b60006126a185828601612455565b92505060206126b285828601612494565b9150509250929050565b600080604083850312156126cf57600080fd5b60006126dd85828601612455565b92505060206126ee8582860161253c565b9150509250929050565b60008060006060848603121561270d57600080fd5b600061271b86828701612455565b935050602061272c8682870161253c565b925050604084013567ffffffffffffffff81111561274957600080fd5b6127558682870161246a565b9150509250925092565b6000806040838503121561277257600080fd5b6000612780858286016124a9565b92505060206127918582860161253c565b9150509250929050565b6000602082840312156127ad57600080fd5b60006127bb848285016124be565b91505092915050565b6000602082840312156127d657600080fd5b60006127e4848285016124d3565b91505092915050565b6000602082840312156127ff57600080fd5b600082013567ffffffffffffffff81111561281957600080fd5b61282584828501612512565b91505092915050565b60006020828403121561284057600080fd5b600061284e8482850161253c565b91505092915050565b6000806040838503121561286a57600080fd5b60006128788582860161253c565b925050602061288985828601612455565b9150509250929050565b61289c81612d01565b82525050565b6128b36128ae82612d01565b612e6d565b82525050565b6128c281612d13565b82525050565b6128d181612d1f565b82525050565b60006128e282612c03565b6128ec8185612c19565b93506128fc818560208601612d8e565b61290581612f88565b840191505092915050565b600061291b82612c0e565b6129258185612c2a565b9350612935818560208601612d8e565b61293e81612f88565b840191505092915050565b600061295482612c0e565b61295e8185612c3b565b935061296e818560208601612d8e565b80840191505092915050565b6000612987602683612c2a565b915061299282612fa6565b604082019050919050565b60006129aa602083612c2a565b91506129b582612ff5565b602082019050919050565b6129c981612d75565b82525050565b6129e06129db82612d75565b612e91565b82525050565b60006129f282856128a2565b601482019150612a0282846129cf565b6020820191508190509392505050565b6000612a1e8285612949565b9150612a2a8284612949565b91508190509392505050565b6000602082019050612a4b6000830184612893565b92915050565b6000608082019050612a666000830187612893565b612a736020830186612893565b612a8060408301856129c0565b8181036060830152612a9281846128d7565b905095945050505050565b6000602082019050612ab260008301846128b9565b92915050565b6000602082019050612acd60008301846128c8565b92915050565b60006020820190508181036000830152612aed8184612910565b905092915050565b60006020820190508181036000830152612b0e8161297a565b9050919050565b60006020820190508181036000830152612b2e8161299d565b9050919050565b6000602082019050612b4a60008301846129c0565b92915050565b6000612b5a612b6b565b9050612b668282612df3565b919050565b6000604051905090565b600067ffffffffffffffff821115612b9057612b8f612f59565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612bbc57612bbb612f59565b5b612bc582612f88565b9050602081019050919050565b600067ffffffffffffffff821115612bed57612bec612f59565b5b612bf682612f88565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612c5182612d75565b9150612c5c83612d75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c9157612c90612ecc565b5b828201905092915050565b6000612ca782612d75565b9150612cb283612d75565b925082612cc257612cc1612efb565b5b828204905092915050565b6000612cd882612d75565b9150612ce383612d75565b925082821015612cf657612cf5612ecc565b5b828203905092915050565b6000612d0c82612d55565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612dac578082015181840152602081019050612d91565b83811115612dbb576000848401525b50505050565b60006002820490506001821680612dd957607f821691505b60208210811415612ded57612dec612f2a565b5b50919050565b612dfc82612f88565b810181811067ffffffffffffffff82111715612e1b57612e1a612f59565b5b80604052505050565b6000612e2f82612d75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e6257612e61612ecc565b5b600182019050919050565b6000612e7882612e7f565b9050919050565b6000612e8a82612f99565b9050919050565b6000819050919050565b6000612ea682612d75565b9150612eb183612d75565b925082612ec157612ec0612efb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61302781612d01565b811461303257600080fd5b50565b61303e81612d13565b811461304957600080fd5b50565b61305581612d1f565b811461306057600080fd5b50565b61306c81612d29565b811461307757600080fd5b50565b61308381612d75565b811461308e57600080fd5b5056fea2646970667358221220274fdcf7bd7855b81fbb38f11128732bb70be18d4c100002a4a0d28f6059f08a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637a0101a2116100f9578063b88d4fde11610097578063cf30901211610071578063cf309012146104b8578063e985e9c5146104d6578063f2fde38b14610506578063f83d08ba14610522576101a9565b8063b88d4fde1461044e578063bcb396211461046a578063c87b56dd14610488576101a9565b806395d89b41116100d357806395d89b41146103c8578063a22cb465146103e6578063a9147d4a14610402578063af88fac914610432576101a9565b80637a0101a2146103705780637c382d0b1461038e5780638da5cb5b146103aa576101a9565b806323b872dd116101665780636352211e116101405780636352211e146102ea578063641ce1401461031a57806370a0823114610336578063715018a614610366576101a9565b806323b872dd1461029657806342842e0e146102b257806355f804b3146102ce576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc57806308d084621461022c578063095ea7b31461025c57806318160ddd14610278575b600080fd5b6101c860048036038101906101c3919061279b565b61052c565b6040516101d59190612a9d565b60405180910390f35b6101e661060e565b6040516101f39190612ad3565b60405180910390f35b6102166004803603810190610211919061282e565b6106a0565b6040516102239190612a36565b60405180910390f35b6102466004803603810190610241919061282e565b61071c565b6040516102539190612ab8565b60405180910390f35b610276600480360381019061027191906126bc565b610734565b005b610280610839565b60405161028d9190612b35565b60405180910390f35b6102b060048036038101906102ab91906125b6565b610850565b005b6102cc60048036038101906102c791906125b6565b610860565b005b6102e860048036038101906102e391906127ed565b610880565b005b61030460048036038101906102ff919061282e565b6108a2565b6040516103119190612a36565b60405180910390f35b610334600480360381019061032f91906126f8565b6108b8565b005b610350600480360381019061034b9190612551565b610a94565b60405161035d9190612b35565b60405180910390f35b61036e610b64565b005b610378610b78565b6040516103859190612ad3565b60405180910390f35b6103a860048036038101906103a3919061275f565b610c06565b005b6103b2610c2a565b6040516103bf9190612a36565b60405180910390f35b6103d0610c54565b6040516103dd9190612ad3565b60405180910390f35b61040060048036038101906103fb9190612680565b610ce6565b005b61041c60048036038101906104179190612857565b610e5e565b6040516104299190612a9d565b60405180910390f35b61044c6004803603810190610447919061282e565b610e8d565b005b61046860048036038101906104639190612605565b610e9f565b005b610472610f17565b60405161047f9190612b35565b60405180910390f35b6104a2600480360381019061049d919061282e565b610f1d565b6040516104af9190612ad3565b60405180910390f35b6104c0610fbc565b6040516104cd9190612a9d565b60405180910390f35b6104f060048036038101906104eb919061257a565b610fcf565b6040516104fd9190612a9d565b60405180910390f35b610520600480360381019061051b9190612551565b611063565b005b61052a6110e7565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061060757506106068261110c565b5b9050919050565b60606002805461061d90612dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461064990612dc1565b80156106965780601f1061066b57610100808354040283529160200191610696565b820191906000526020600020905b81548152906001019060200180831161067957829003601f168201915b5050505050905090565b60006106ab82611176565b6106e1576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600a6020528060005260406000206000915090505481565b600061073f826108a2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107a7576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107c66111c4565b73ffffffffffffffffffffffffffffffffffffffff1614610829576107f2816107ed6111c4565b610fcf565b610828576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6108348383836111cc565b505050565b600061084361127e565b6001546000540303905090565b61085b838383611283565b505050565b61087b83838360405180602001604052806000815250610e9f565b505050565b610888611739565b806009908051906020019061089e929190612287565b5050565b60006108ad826117b7565b600001519050919050565b600d60009054906101000a900460ff16156108ff576040517f0f2e5b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b6000600c54815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610996576040517fddefae2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109e082600a6000600c5481526020019081526020016000205486866040516020016109c59291906129e6565b60405160208183030381529060405280519060200120611a42565b905080610a19576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b6000600c54815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a8e8484611a59565b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610afc576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b610b6c611739565b610b766000611d35565b565b60098054610b8590612dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb190612dc1565b8015610bfe5780601f10610bd357610100808354040283529160200191610bfe565b820191906000526020600020905b815481529060010190602001808311610be157829003601f168201915b505050505081565b610c0e611739565b81600a6000838152602001908152602001600020819055505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610c6390612dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f90612dc1565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b5050505050905090565b610cee6111c4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d53576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060076000610d606111c4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610e0d6111c4565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610e529190612a9d565b60405180910390a35050565b600b6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b610e95611739565b80600c8190555050565b610eaa848484611283565b610ec98373ffffffffffffffffffffffffffffffffffffffff16611dfb565b15610f1157610eda84848484611e1e565b610f10576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b600c5481565b6060610f2882611176565b610f5e576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f68611f7e565b9050600081511415610f895760405180602001604052806000815250610fb4565b80610f9384612010565b604051602001610fa4929190612a12565b6040516020818303038152906040525b915050919050565b600d60009054906101000a900460ff1681565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61106b611739565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d290612af5565b60405180910390fd5b6110e481611d35565b50565b6110ef611739565b6001600d60006101000a81548160ff021916908315150217905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008161118161127e565b11158015611190575060005482105b80156111bd575060046000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600090565b600061128e826117b7565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146112f9576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1661131a6111c4565b73ffffffffffffffffffffffffffffffffffffffff1614806113495750611348856113436111c4565b610fcf565b5b8061138e57506113576111c4565b73ffffffffffffffffffffffffffffffffffffffff16611376846106a0565b73ffffffffffffffffffffffffffffffffffffffff16145b9050806113c7576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561142e576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61143b85858560016121bd565b611447600084876111cc565b6001600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600460008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116c75760005482146116c657878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461173285858560016121c3565b5050505050565b6117416111c4565b73ffffffffffffffffffffffffffffffffffffffff1661175f610c2a565b73ffffffffffffffffffffffffffffffffffffffff16146117b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ac90612b15565b60405180910390fd5b565b6117bf61230d565b6000829050806117cd61127e565b11611a0b57600054811015611a0a576000600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff16151515158152505090508060400151611a0857600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146118ec578092505050611a3d565b5b600115611a0757818060019003925050600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614611a02578092505050611a3d565b6118ed565b5b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600082611a4f85846121c9565b1490509392505050565b600080549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ac6576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821415611b01576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b0e60008483856121bd565b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160088282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826004600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426004600083815260200190815260200160002060000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000819050600083820190505b818060010192508573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4808210611cb157816000819055505050611d3060008483856121c3565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e446111c4565b8786866040518563ffffffff1660e01b8152600401611e669493929190612a51565b602060405180830381600087803b158015611e8057600080fd5b505af1925050508015611eb157506040513d601f19601f82011682018060405250810190611eae91906127c4565b60015b611f2b573d8060008114611ee1576040519150601f19603f3d011682016040523d82523d6000602084013e611ee6565b606091505b50600081511415611f23576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060098054611f8d90612dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb990612dc1565b80156120065780601f10611fdb57610100808354040283529160200191612006565b820191906000526020600020905b815481529060010190602001808311611fe957829003601f168201915b5050505050905090565b60606000821415612058576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506121b8565b600082905060005b6000821461208a57808061207390612e24565b915050600a826120839190612c9c565b9150612060565b60008167ffffffffffffffff8111156120cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120fe5781602001600182028036833780820191505090505b5090505b600085146121b1576001826121179190612ccd565b9150600a856121269190612e9b565b60306121329190612c46565b60f81b81838151811061216e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856121aa9190612c9c565b9450612102565b8093505050505b919050565b50505050565b50505050565b60008082905060005b845181101561223a5761222582868381518110612218577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612245565b9150808061223290612e24565b9150506121d2565b508091505092915050565b600081831061225d576122588284612270565b612268565b6122678383612270565b5b905092915050565b600082600052816020526040600020905092915050565b82805461229390612dc1565b90600052602060002090601f0160209004810192826122b557600085556122fc565b82601f106122ce57805160ff19168380011785556122fc565b828001600101855582156122fc579182015b828111156122fb5782518255916020019190600101906122e0565b5b5090506123099190612350565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b5b80821115612369576000816000905550600101612351565b5090565b600061238061237b84612b75565b612b50565b9050808382526020820190508285602086028201111561239f57600080fd5b60005b858110156123cf57816123b588826124a9565b8452602084019350602083019250506001810190506123a2565b5050509392505050565b60006123ec6123e784612ba1565b612b50565b90508281526020810184848401111561240457600080fd5b61240f848285612d7f565b509392505050565b600061242a61242584612bd2565b612b50565b90508281526020810184848401111561244257600080fd5b61244d848285612d7f565b509392505050565b6000813590506124648161301e565b92915050565b600082601f83011261247b57600080fd5b813561248b84826020860161236d565b91505092915050565b6000813590506124a381613035565b92915050565b6000813590506124b88161304c565b92915050565b6000813590506124cd81613063565b92915050565b6000815190506124e281613063565b92915050565b600082601f8301126124f957600080fd5b81356125098482602086016123d9565b91505092915050565b600082601f83011261252357600080fd5b8135612533848260208601612417565b91505092915050565b60008135905061254b8161307a565b92915050565b60006020828403121561256357600080fd5b600061257184828501612455565b91505092915050565b6000806040838503121561258d57600080fd5b600061259b85828601612455565b92505060206125ac85828601612455565b9150509250929050565b6000806000606084860312156125cb57600080fd5b60006125d986828701612455565b93505060206125ea86828701612455565b92505060406125fb8682870161253c565b9150509250925092565b6000806000806080858703121561261b57600080fd5b600061262987828801612455565b945050602061263a87828801612455565b935050604061264b8782880161253c565b925050606085013567ffffffffffffffff81111561266857600080fd5b612674878288016124e8565b91505092959194509250565b6000806040838503121561269357600080fd5b60006126a185828601612455565b92505060206126b285828601612494565b9150509250929050565b600080604083850312156126cf57600080fd5b60006126dd85828601612455565b92505060206126ee8582860161253c565b9150509250929050565b60008060006060848603121561270d57600080fd5b600061271b86828701612455565b935050602061272c8682870161253c565b925050604084013567ffffffffffffffff81111561274957600080fd5b6127558682870161246a565b9150509250925092565b6000806040838503121561277257600080fd5b6000612780858286016124a9565b92505060206127918582860161253c565b9150509250929050565b6000602082840312156127ad57600080fd5b60006127bb848285016124be565b91505092915050565b6000602082840312156127d657600080fd5b60006127e4848285016124d3565b91505092915050565b6000602082840312156127ff57600080fd5b600082013567ffffffffffffffff81111561281957600080fd5b61282584828501612512565b91505092915050565b60006020828403121561284057600080fd5b600061284e8482850161253c565b91505092915050565b6000806040838503121561286a57600080fd5b60006128788582860161253c565b925050602061288985828601612455565b9150509250929050565b61289c81612d01565b82525050565b6128b36128ae82612d01565b612e6d565b82525050565b6128c281612d13565b82525050565b6128d181612d1f565b82525050565b60006128e282612c03565b6128ec8185612c19565b93506128fc818560208601612d8e565b61290581612f88565b840191505092915050565b600061291b82612c0e565b6129258185612c2a565b9350612935818560208601612d8e565b61293e81612f88565b840191505092915050565b600061295482612c0e565b61295e8185612c3b565b935061296e818560208601612d8e565b80840191505092915050565b6000612987602683612c2a565b915061299282612fa6565b604082019050919050565b60006129aa602083612c2a565b91506129b582612ff5565b602082019050919050565b6129c981612d75565b82525050565b6129e06129db82612d75565b612e91565b82525050565b60006129f282856128a2565b601482019150612a0282846129cf565b6020820191508190509392505050565b6000612a1e8285612949565b9150612a2a8284612949565b91508190509392505050565b6000602082019050612a4b6000830184612893565b92915050565b6000608082019050612a666000830187612893565b612a736020830186612893565b612a8060408301856129c0565b8181036060830152612a9281846128d7565b905095945050505050565b6000602082019050612ab260008301846128b9565b92915050565b6000602082019050612acd60008301846128c8565b92915050565b60006020820190508181036000830152612aed8184612910565b905092915050565b60006020820190508181036000830152612b0e8161297a565b9050919050565b60006020820190508181036000830152612b2e8161299d565b9050919050565b6000602082019050612b4a60008301846129c0565b92915050565b6000612b5a612b6b565b9050612b668282612df3565b919050565b6000604051905090565b600067ffffffffffffffff821115612b9057612b8f612f59565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612bbc57612bbb612f59565b5b612bc582612f88565b9050602081019050919050565b600067ffffffffffffffff821115612bed57612bec612f59565b5b612bf682612f88565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612c5182612d75565b9150612c5c83612d75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c9157612c90612ecc565b5b828201905092915050565b6000612ca782612d75565b9150612cb283612d75565b925082612cc257612cc1612efb565b5b828204905092915050565b6000612cd882612d75565b9150612ce383612d75565b925082821015612cf657612cf5612ecc565b5b828203905092915050565b6000612d0c82612d55565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612dac578082015181840152602081019050612d91565b83811115612dbb576000848401525b50505050565b60006002820490506001821680612dd957607f821691505b60208210811415612ded57612dec612f2a565b5b50919050565b612dfc82612f88565b810181811067ffffffffffffffff82111715612e1b57612e1a612f59565b5b80604052505050565b6000612e2f82612d75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e6257612e61612ecc565b5b600182019050919050565b6000612e7882612e7f565b9050919050565b6000612e8a82612f99565b9050919050565b6000819050919050565b6000612ea682612d75565b9150612eb183612d75565b925082612ec157612ec0612efb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61302781612d01565b811461303257600080fd5b50565b61303e81612d13565b811461304957600080fd5b50565b61305581612d1f565b811461306057600080fd5b50565b61306c81612d29565b811461307757600080fd5b50565b61308381612d75565b811461308e57600080fd5b5056fea2646970667358221220274fdcf7bd7855b81fbb38f11128732bb70be18d4c100002a4a0d28f6059f08a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_baseTokenUri": ": base token URI",
          "_merkleRoot": ": Merkle root for verifying allowlist",
          "_name": ": name of the NFT contract",
          "_symbol": ": symbol / ticker of the NFT contract*",
          "_treasureQuantity": ": Amount of initial nfts minted to treasury"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,uint256,bytes32[])": {
        "params": {
          "_proof": ": merkle tree proof used to verify allowlisted user",
          "_quantity": ": quantity of nfts to mint",
          "_to": ": address to mint to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setMerkleRoot(bytes32,uint256)": {
        "params": {
          "_merkleRoot": ": the new merkle root to be set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApprovalToCurrentOwner()": [
        {
          "notice": "The caller cannot approve to the current owner."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "AnotherPFP contract constructor"
      },
      "mint(address,uint256,bytes32[])": {
        "notice": "Lets an allowlisted user mint another pfp"
      },
      "setMerkleRoot(bytes32,uint256)": {
        "notice": "Update the merkle root (for allowlist)  Only the contract owner can perform this operation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1572,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1574,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1576,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1578,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1583,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2978_storage)"
      },
      {
        "astId": 1588,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)2987_storage)"
      },
      {
        "astId": 1592,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1598,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1372,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "baseTokenUri",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 1376,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "merkleRootPerSeason",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1382,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "addressMintedPerSeason",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1385,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "currentSeason",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1388,
        "contract": "contracts/AnotherPFP.sol:AnotherPFP",
        "label": "locked",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2987_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2987_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2978_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2978_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2987_storage": {
        "encoding": "inplace",
        "label": "struct IERC721A.AddressData",
        "members": [
          {
            "astId": 2980,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2982,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2984,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2986,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2978_storage": {
        "encoding": "inplace",
        "label": "struct IERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2973,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2975,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2977,
            "contract": "contracts/AnotherPFP.sol:AnotherPFP",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}